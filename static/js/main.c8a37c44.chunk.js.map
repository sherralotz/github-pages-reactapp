{"version":3,"sources":["Components/MovieCard.js","Components/SearchMovie.js","Components/MovieApp.js","App.js","serviceWorker.js","index.js"],"names":["MovieCard","props","movie","className","src","poster_path","alt","title","SearchMovie","useState","query","setQuery","movies","setMovies","searchMovies","e","a","preventDefault","url","fetch","res","json","data","results","console","log","onSubmit","type","onChange","target","value","name","placeholder","filter","map","key","id","MovieApp","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kPAEe,SAASA,EAAUC,GAAQ,IAChCC,EAAUD,EAAVC,MACR,OACE,yBAAKC,UAAU,QACb,yBACEA,UAAU,cACVC,IAAG,0DAAqDF,EAAMG,aAC9DC,IAAKJ,EAAMK,MAAQ,YAErB,yBAAKJ,UAAU,eAAeD,EAAMK,QCR3B,SAASC,IAAe,IAAD,EACVC,mBAAS,IADC,mBAC7BC,EAD6B,KACtBC,EADsB,OAERF,mBAAS,IAFD,mBAE7BG,EAF6B,KAErBC,EAFqB,KAG9BC,EAAY,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACnBD,EAAEE,iBACIC,EAFa,kHAEoGR,EAFpG,iDAICS,MAAMD,GAJP,cAIXE,EAJW,gBAKEA,EAAIC,OALN,OAKXC,EALW,OAMjBT,EAAUS,EAAKC,SANE,kDAQjBC,QAAQC,IAAR,MARiB,0DAAH,sDAYlB,OACE,6BACE,0BAAMtB,UAAU,OAAOuB,SAAUZ,GAC/B,2BACEX,UAAU,QACVwB,KAAK,OACLjB,MAAOA,EACPkB,SAAU,SAACb,GAAD,OAAOJ,EAASI,EAAEc,OAAOC,QACnCC,KAAK,QACLC,YAAY,uBAEd,4BAAQ7B,UAAU,SAASwB,KAAK,UAAhC,iBAIF,yBAAKxB,UAAU,mBACZS,EACEqB,QAAO,SAAC/B,GAAD,OAAWA,EAAMG,eACxB6B,KAAI,SAAChC,GAAD,OACH,kBAACF,EAAD,CAAWE,MAAOA,EAAOiC,IAAKjC,EAAMkC,UC1BjCC,MARf,WACE,OACE,yBAAKlC,UAAU,aACb,kBAACK,EAAD,QCKS8B,MAPf,WACE,OACE,6BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,a","file":"static/js/main.c8a37c44.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function MovieCard(props) {\r\n  const { movie } = props;\r\n  return (\r\n    <div className=\"card\">\r\n      <img\r\n        className=\"card__cover\"\r\n        src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${movie.poster_path}`}\r\n        alt={movie.title + \" poster\"}\r\n      />\r\n      <div className=\"card__title\">{movie.title}</div>\r\n    </div>\r\n  );\r\n}\r\n/* <div className=\"card--content\">\r\n    <h3 className=\"card--title\">{movie.title}</h3>\r\n    <p>\r\n        <small>RELEASE DATE: {movie.release_date}</small>\r\n    </p>\r\n    <p>\r\n        <small>RATING: {movie.vote_average}</small>\r\n    </p>\r\n    <p className=\"card--desc\">{movie.overview}</p>\r\n    </div> */\r\n","import React, { useState } from \"react\";\r\nimport MovieCard from \"./MovieCard\";\r\n\r\nexport default function SearchMovie() {\r\n  const [query, setQuery] = useState(\"\");\r\n  const [movies, setMovies] = useState([]);\r\n  const searchMovies = async (e) => {\r\n    e.preventDefault();\r\n    const url = `https://api.themoviedb.org/3/search/movie?api_key=5dcf7f28a88be0edc01bbbde06f024ab&language=en-US&query=${query}&page=1&include_adult=false`;\r\n    try {\r\n      const res = await fetch(url);\r\n      const data = await res.json();\r\n      setMovies(data.results);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form className=\"form\" onSubmit={searchMovies}>\r\n        <input\r\n          className=\"input\"\r\n          type=\"text\"\r\n          query={query}\r\n          onChange={(e) => setQuery(e.target.value)}\r\n          name=\"query\"\r\n          placeholder=\"i.e. Jurassic Park\"\r\n        />\r\n        <button className=\"button\" type=\"submit\">\r\n          Search Movie\r\n        </button>\r\n      </form>\r\n      <div className=\"moviescontainer\">\r\n        {movies\r\n          .filter((movie) => movie.poster_path)\r\n          .map((movie) => (\r\n            <MovieCard movie={movie} key={movie.id} />\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport SearchMovie from \"./SearchMovie\";\r\n\r\nfunction MovieApp() {\r\n  return (\r\n    <div className=\"container\">\r\n      <SearchMovie />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MovieApp;\r\n","import React from \"react\";\nimport \"./Components/movieindex.scss\";\nimport MovieApp from \"./Components/MovieApp\";\n\nfunction App() {\n  return (\n    <div>\n      <MovieApp />\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}